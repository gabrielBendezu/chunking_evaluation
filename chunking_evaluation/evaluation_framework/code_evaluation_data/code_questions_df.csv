question,references,corpus_id
What is the default behavior regarding the running of validators as specified in the setter function in the attrs library?,"[{""content"": ""__all__ = [\""get_run_validators\"", \""set_run_validators\""]\n\n_run_validators = True"", ""start_index"": 487108, ""end_index"": 487186}, {""content"": ""def set_run_validators(run):\n    \""\""\""\n    Set whether or not validators are run.  By default, they are run.\n\n    .. deprecated:: 21.3.0 It will not be removed, but it also will not be\n        moved to new ``attrs`` namespace. Use `attrs.validators.set_disabled()`\n        instead.\n    \""\""\""\n    if not isinstance(run, bool):\n        msg = \""'run' must be bool.\""\n        raise TypeError(msg)\n    global _run_validators\n    _run_validators = run"", ""start_index"": 487189, ""end_index"": 487628}]",attrs
What happens if a default value has already been set for an attribute when using the default decorator in the _CountingAttr class?,"[{""content"": ""def default(self, meth):\n        \""\""\""\n        Decorator that allows to set the default for an attribute.\n\n        Returns *meth* unchanged.\n\n        Raises:\n            DefaultAlreadySetError: If default has been set before.\n\n        .. versionadded:: 17.1.0\n        \""\""\""\n        if self._default is not NOTHING:\n            raise DefaultAlreadySetError\n\n        self._default = Factory(meth, takes_self=True)\n\n        return meth"", ""start_index"": 434053, ""end_index"": 434481}]",attrs
What exceptions are captured by the `test_abort_exceptions_with_disabled_standalone_mode` function during the command execution?,"[{""content"": ""@pytest.mark.parametrize(\""exc\"", (EOFError, KeyboardInterrupt))\ndef test_abort_exceptions_with_disabled_standalone_mode(runner, exc):\n    @click.command()\n    def cli():\n        raise exc(\""catch me!\"")\n\n    rv = runner.invoke(cli, standalone_mode=False)\n    assert rv.exit_code == 1\n    assert isinstance(rv.exception.__cause__, exc)\n    assert rv.exception.__cause__.args == (\""catch me!\"",)"", ""start_index"": 132454, ""end_index"": 132842}]",click
How does the `C` class in the `test_converts_and_validates_by_default` method ensure that the 'x' attribute value is an integer not less than 10?,"[{""content"": ""\""\""\""\n        If no on_setattr is set, assume setters.convert, setters.validate.\n        \""\""\""\n\n        @attrs.define\n        class C:\n            x: int = attrs.field(converter=int)\n\n            @x.validator\n            def _v(self, _, value):\n                if value < 10:\n                    raise ValueError(\""must be >=10\"")\n\n        inst = C(10)\n\n        # Converts\n        inst.x = \""11\""\n\n        assert 11 == inst.x\n\n        # Validates\n        with pytest.raises(ValueError, match=\""must be >=10\""):\n            inst.x = \""9\"""", ""start_index"": 290677, ""end_index"": 291202}]",attrs
How does the test_named_tuple_retain_type method ensure that namedtuples can be serialized with retain_collection_types set to True?,"[{""content"": ""\""\""\""\n        Namedtuples can be serialized if retain_collection_types is True.\n\n        See #1164\n        \""\""\""\n\n        class Coordinates(NamedTuple):\n            lat: float\n            lon: float\n\n        @attr.s\n        class A:\n            coords: Coordinates = attr.ib()\n\n        instance = A(Coordinates(50.419019, 30.516225))\n\n        assert (Coordinates(50.419019, 30.516225),) == attr.astuple(\n            instance, retain_collection_types=True\n        )"", ""start_index"": 19998, ""end_index"": 20458}]",attrs
What are the conditions and respective values for setting the 'default_map' attribute in the given context configuration code?,"[{""content"": ""self.obj: t.Any = obj\n        self._meta: dict[str, t.Any] = getattr(parent, \""meta\"", {})\n\n        #: A dictionary (-like object) with defaults for parameters.\n        if (\n            default_map is None\n            and info_name is not None\n            and parent is not None\n            and parent.default_map is not None\n        ):\n            default_map = parent.default_map.get(info_name)\n\n        self.default_map: cabc.MutableMapping[str, t.Any] | None = default_map"", ""start_index"": 266758, ""end_index"": 267232}]",click
How does the provided code snippet handle an incomplete option in a shell command?,"[{""content"": ""def _start_of_option(ctx: Context, value: str) -> bool:\n    \""\""\""Check if the value looks like the start of an option.\""\""\""\n    if not value:\n        return False\n\n    c = value[0]\n    return c in ctx._opt_prefixes"", ""start_index"": 514744, ""end_index"": 514954}, {""content"": ""def _is_incomplete_option(ctx: Context, args: list[str], param: Parameter) -> bool:\n    \""\""\""Determine if the given parameter is an option that needs a value.\n\n    :param args: List of complete args before the incomplete value.\n    :param param: Option object being checked.\n    \""\""\""\n    if not isinstance(param, Option):\n        return False\n\n    if param.is_flag or param.count:\n        return False\n\n    last_option = None\n\n    for index, arg in enumerate(reversed(args)):\n        if index + 1 > param.nargs:\n            break\n\n        if _start_of_option(ctx, arg):\n            last_option = arg\n\n    return last_option is not None and last_option in param.opts"", ""start_index"": 514957, ""end_index"": 515619}]",click
What error is raised if both `default` and `factory` are specified for an attribute in the `attr.ib` method?,"[{""content"": ""    def test_sugar_factory_mutex(self):\n        \""\""\""\n        Passing both default and factory raises ValueError.\n        \""\""\""\n        with pytest.raises(ValueError, match=\""mutually exclusive\""):\n\n            @attr.s\n            class C:\n                x = attr.ib(factory=list, default=Factory(list))"", ""start_index"": 98663, ""end_index"": 98961}]",attrs
What type of error does `test_fails_because_success` method expect to raise if the wrapped validator `always_passes` does not fail?,"[{""content"": ""        with pytest.raises(ValueError) as e:\n            v(1, a, input_value)"", ""start_index"": 180608, ""end_index"": 180685}, {""content"": ""        assert (\n            (\n                f\""not_ validator child '{always_passes!r}' did not raise a captured error\""\n            ),\n            a,\n            always_passes,\n            input_value,\n            self.DEFAULT_EXC_TYPES,\n        ) == e.value.args"", ""start_index"": 180687, ""end_index"": 180952}]",attrs
How does the function `_collect_base_attrs` handle attribute collection from base classes differently compared to `_collect_base_attrs_broken`?,"[{""content"": ""def _collect_base_attrs(\n    cls, taken_attr_names\n) -> tuple[list[Attribute], dict[str, type]]:\n    \""\""\""\n    Collect attr.ibs from base classes of *cls*, except *taken_attr_names*.\n    \""\""\""\n    base_attrs = []\n    base_attr_map = {}  # A dictionary of base attrs to their classes.\n\n    # Traverse the MRO and collect attributes.\n    for base_cls in reversed(cls.__mro__[1:-1]):\n        for a in getattr(base_cls, \""__attrs_attrs__\"", []):\n            if a.inherited or a.name in taken_attr_names:\n                continue\n\n            a = a.evolve(inherited=True)  # noqa: PLW2901\n            base_attrs.append(a)\n            base_attr_map[a.name] = base_cls\n\n    # For each name, only keep the freshest definition i.e. the furthest at the\n    # back.  base_attr_map is fine because it gets overwritten with every new\n    # instance.\n    filtered = []\n    seen = set()\n    for a in reversed(base_attrs):\n        if a.name in seen:\n            continue\n        filtered.insert(0, a)\n        seen.add(a.name)\n\n    return filtered, base_attr_map"", ""start_index"": 357674, ""end_index"": 358713}, {""content"": ""def _collect_base_attrs_broken(cls, taken_attr_names):\n    \""\""\""\n    Collect attr.ibs from base classes of *cls*, except *taken_attr_names*.\n\n    N.B. *taken_attr_names* will be mutated.\n\n    Adhere to the old incorrect behavior.\n\n    Notably it collects from the front and considers inherited attributes which\n    leads to the buggy behavior reported in #428.\n    \""\""\""\n    base_attrs = []\n    base_attr_map = {}  # A dictionary of base attrs to their classes.\n\n    # Traverse the MRO and collect attributes.\n    for base_cls in cls.__mro__[1:-1]:\n        for a in getattr(base_cls, \""__attrs_attrs__\"", []):\n            if a.name in taken_attr_names:\n                continue\n\n            a = a.evolve(inherited=True)  # noqa: PLW2901\n            taken_attr_names.add(a.name)\n            base_attrs.append(a)\n            base_attr_map[a.name] = base_cls\n\n    return base_attrs, base_attr_map"", ""start_index"": 358716, ""end_index"": 359603}]",attrs
What conditions determine whether the `_ClassBuilder` sets its `_on_setattr` attribute to `None`?,"[{""content"": ""elif on_setattr in (\n            _DEFAULT_ON_SETATTR,\n            setters.validate,\n            setters.convert,\n        ):\n            has_validator = has_converter = False\n            for a in attrs:\n                if a.validator is not None:\n                    has_validator = True\n                if a.converter is not None:\n                    has_converter = True\n\n                if has_validator and has_converter:\n                    break\n            if (\n                (\n                    on_setattr == _DEFAULT_ON_SETATTR\n                    and not (has_validator or has_converter)\n                )\n                or (on_setattr == setters.validate and not has_validator)\n                or (on_setattr == setters.convert and not has_converter)\n            ):\n                # If class-level on_setattr is set to convert + validate, but\n                # there's no field to convert or validate, pretend like there's\n                # no on_setattr.\n                self._on_setattr = None"", ""start_index"": 370209, ""end_index"": 371220}]",attrs
What effects does setting `slots=True` have according to the comments in the code?,"[{""content"": ""        - *slots=True*\n\n          Usually, this has only upsides and few visible effects in everyday\n          programming. But it *can* lead to some surprising behaviors, so\n          please make sure to read :term:`slotted classes`"", ""start_index"": 466157, ""end_index"": 466390}]",attrs
What is the default behavior of the `flag_value` option related to environment variables as of version 8.2?,"[{""content"": "".. versionchanged:: 8.2\n        ``envvar`` used with ``flag_value`` will always use the ``flag_value``,\n        previously it would use the value of the environment variable"", ""start_index"": 350168, ""end_index"": 350341}]",click
How does the method `prompt_for_value` handle default values when prompting for boolean flags in a command's context?,"[{""content"": ""        if self.is_bool_flag:\n            return confirm(self.prompt, default)"", ""start_index"": 365351, ""end_index"": 365429}]",click
What class type does the `my_subclass` method return when called on instances of `C2` and `C2Slots`?,"[{""content"": ""@attr.s\n        class C2(C1):\n            def my_subclass(self):\n                return __class__"", ""start_index"": 227942, ""end_index"": 228039}, {""content"": ""@attr.s\n        class C2Slots(C1Slots):\n            def my_subclass(self):\n                return __class__"", ""start_index"": 228049, ""end_index"": 228156}, {""content"": ""assert non_slot_instance.my_subclass() is C2"", ""start_index"": 228514, ""end_index"": 228558}, {""content"": ""assert slot_instance.my_subclass() is C2Slots"", ""start_index"": 228567, ""end_index"": 228612}]",attrs
How does the `test_type_error_with_retain_type` method confirm that the correct TypeError message is raised when incorrect initialization parameters are passed to the `Coordinates` class that has been incorrectly initialized?,"[{""content"": ""def test_type_error_with_retain_type(self):\n        \""\""\""\n        Serialization that fails with TypeError leaves the error through if\n        they're not tuples.\n\n        See #1164\n        \""\""\""\n\n        message = \""__new__() missing 1 required positional argument (astuple)\""\n\n        class Coordinates(list):\n            def __init__(self, first, *rest):\n                if isinstance(first, list):\n                    raise TypeError(message)\n                super().__init__([first, *rest])\n\n        @attr.s\n        class A:\n            coords: Coordinates = attr.ib()\n\n        instance = A(Coordinates(50.419019, 30.516225))\n\n        with pytest.raises(TypeError, match=re.escape(message)):\n            attr.astuple(instance, retain_collection_types=True)\n"", ""start_index"": 20464, ""end_index"": 21219}]",attrs
How does the function `test_formatting_custom_type_metavar` define the metavariable for a custom type in a Click command?,"[{""content"": ""def test_formatting_custom_type_metavar(runner):\n    class MyType(click.ParamType):\n        def get_metavar(self, param: click.Parameter, ctx: click.Context):\n            return \""MY_TYPE\""\n\n    @click.command(\""foo\"")\n    @click.help_option()\n    @click.argument(\""param\"", type=MyType())\n    def cmd(param):\n        pass\n\n    result = runner.invoke(cmd, \""--help\"")\n    assert not result.exception\n    assert result.output.splitlines() == [\n        \""Usage: foo [OPTIONS] MY_TYPE\"",\n        \""\"",\n        \""Options:\"",\n        \""  --help  Show this message and exit.\"",\n    ]"", ""start_index"": 139246, ""end_index"": 139807}]",click
How does the `DateTime` class in the given code support handling multiple date formats for converting strings into `datetime` objects?,"[{""content"": ""class DateTime(ParamType):\n    \""\""\""The DateTime type converts date strings into `datetime` objects.\n\n    The format strings which are checked are configurable, but default to some\n    common (non-timezone aware) ISO 8601 formats.\n\n    When specifying *DateTime* formats, you should only pass a list or a tuple.\n    Other iterables, like generators, may lead to surprising results.\n\n    The format strings are processed using ``datetime.strptime``, and this\n    consequently defines the format strings which are allowed.\n\n    Parsing is tried using each format, in order, and the first format which\n    parses successfully is used.\n\n    :param formats: A list or tuple of date format strings, in the order in\n                    which they should be tried. Defaults to\n                    ``'%Y-%m-%d'``, ``'%Y-%m-%dT%H:%M:%S'``,\n                    ``'%Y-%m-%d %H:%M:%S'``.\n    \""\""\""\n\n    name = \""datetime\""\n\n    def __init__(self, formats: cabc.Sequence[str] | None = None):\n        self.formats: cabc.Sequence[str] = formats or [\n            \""%Y-%m-%d\"",\n            \""%Y-%m-%dT%H:%M:%S\"",\n            \""%Y-%m-%d %H:%M:%S\"",\n        ]"", ""start_index"": 385308, ""end_index"": 386435}, {""content"": ""def convert(\n        self, value: t.Any, param: Parameter | None, ctx: Context | None\n    ) -> t.Any:\n        if isinstance(value, datetime):\n            return value\n\n        for format in self.formats:\n            converted = self._try_to_convert_date(value, format)\n\n            if converted is not None:\n                return converted\n\n        formats_str = \"", \"".join(map(repr, self.formats))\n        self.fail(\n            ngettext(\n                \""{value!r} does not match the format {format}.\"",\n                \""{value!r} does not match the formats {formats}.\"",\n                len(self.formats),\n            ).format(value=value, format=formats_str, formats=formats_str),\n            param,\n            ctx,\n        )"", ""start_index"": 386920, ""end_index"": 387648}]",click
What is the resulting timezone name when using the `pendulum.from_timestamp()` function with an 'America/Toronto' timezone string?,"[{""content"": ""def test_create_from_timestamp_with_timezone_string():\n    d = pendulum.from_timestamp(0, \""America/Toronto\"")\n    assert d.timezone_name == \""America/Toronto\""\n    assert_datetime(d, 1969, 12, 31, 19, 0, 0)"", ""start_index"": 112005, ""end_index"": 112208}]",pendulum
What happens if the start date is later than the end date when initializing the date interval in this code?,"[{""content"": ""if start > end:\n            self._invert = True\n\n            if absolute:\n                end, start = start, end\n                _end, _start = _start, _end"", ""start_index"": 343399, ""end_index"": 343556}]",pendulum
What validation criteria are applied to the 'colors' field in the 'Validators' schema?,"[{""content"": ""class Validators(Schema):\n    email = fields.Email()\n    colors = fields.Str(validate=validate.OneOf([\""red\"", \""blue\""]))\n    age = fields.Integer(validate=[validate.Range(1, 99)])"", ""start_index"": 59725, ""end_index"": 59902}]",marshmallow
What modifications do the `post_load` and `post_dump` methods apply to the data when processing multiple items?,"[{""content"": ""@post_load(pass_collection=True, pass_original=True)\n            def post_load(self, data, original, many, **kwargs):\n                if many:\n                    ret = []\n                    for item, orig_item in zip(data, original):\n                        item[\""_post_load\""] = orig_item[\""sentinel\""]\n                        ret.append(item)\n                else:\n                    ret = data.copy()\n                    ret[\""_post_load\""] = original[\""sentinel\""]\n                return ret"", ""start_index"": 105313, ""end_index"": 105804}, {""content"": ""@post_dump(pass_collection=True, pass_original=True)\n            def post_dump(self, data, original, many, **kwargs):\n                if many:\n                    ret = []\n                    for item, orig_item in zip(data, original):\n                        item[\""_post_dump\""] = orig_item[\""sentinel\""]\n                        ret.append(item)\n                else:\n                    ret = data.copy()\n                    ret[\""_post_dump\""] = original[\""sentinel\""]\n                return ret"", ""start_index"": 105818, ""end_index"": 106309}]",marshmallow
How does the function `_isnumber_with_thousands_separator` determine if a given string is a number with thousand separators?,"[{""content"": ""_float_with_thousands_separators = re.compile(\n    r\""^(([+-]?[0-9]{1,3})(?:,([0-9]{3}))*)?(?(1)\\.[0-9]*|\\.[0-9]+)?$\""\n)"", ""start_index"": 196470, ""end_index"": 196588}, {""content"": ""def _isnumber_with_thousands_separator(string):\n    \""\""\""\n    >>> _isnumber_with_thousands_separator(\"".\"")\n    False\n    >>> _isnumber_with_thousands_separator(\""1\"")\n    True\n    >>> _isnumber_with_thousands_separator(\""1.\"")\n    True\n    >>> _isnumber_with_thousands_separator(\"".1\"")\n    True\n    >>> _isnumber_with_thousands_separator(\""1000\"")\n    False\n    >>> _isnumber_with_thousands_separator(\""1,000\"")\n    True\n    >>> _isnumber_with_thousands_separator(\""1,0000\"")\n    False\n    >>> _isnumber_with_thousands_separator(\""1,000.1234\"")\n    True\n    >>> _isnumber_with_thousands_separator(b\""1,000.1234\"")\n    True\n    >>> _isnumber_with_thousands_separator(\""+1,000.1234\"")\n    True\n    >>> _isnumber_with_thousands_separator(\""-1,000.1234\"")\n    True\n    \""\""\""\n    try:\n        string = string.decode()\n    except (UnicodeDecodeError, AttributeError):\n        pass\n\n    return bool(re.match(_float_with_thousands_separators, string))"", ""start_index"": 197090, ""end_index"": 198009}]",tabulate
"What behavior is exhibited when a default value is provided for attributes in the `C` class in the `test_default_decorator` method, and what method is called to provide a default for the 'y' attribute?","[{""content"": ""def test_default_decorator(self):\n        \""\""\""\n        Default decorator sets the default and the respective method gets\n        called.\n        \""\""\""\n\n        @attr.s\n        class C:\n            x = attr.ib(default=1)\n            y = attr.ib()\n\n            @y.default\n            def compute(self):\n                return self.x + 1\n\n        assert C(1, 2) == C()"", ""start_index"": 53944, ""end_index"": 54306}]",attrs
How does the hash computation caching behave for the classes marked as `Cached` and `Uncached` during multiple hash computations?,"[{""content"": ""def test_cache_hashing(self):\n        \""\""\""\n        Ensure that hash computation if cached if and only if requested\n        \""\""\""\n\n        class HashCounter:\n            \""\""\""\n            A class for testing which counts how many times its hash\n            has been requested\n            \""\""\""\n\n            def __init__(self):\n                self.times_hash_called = 0\n\n            def __hash__(self):\n                self.times_hash_called += 1\n                return 12345\n\n        Uncached = make_class(\n            \""Uncached\"",\n            {\""hash_counter\"": attr.ib(factory=HashCounter)},\n            unsafe_hash=True,\n            cache_hash=False,\n        )\n        Cached = make_class(\n            \""Cached\"",\n            {\""hash_counter\"": attr.ib(factory=HashCounter)},\n            unsafe_hash=True,\n            cache_hash=True,\n        )\n\n        uncached_instance = Uncached()\n        cached_instance = Cached()\n\n        hash(uncached_instance)\n        hash(uncached_instance)\n        hash(cached_instance)\n        hash(cached_instance)\n\n        assert 2 == uncached_instance.hash_counter.times_hash_called\n        assert 1 == cached_instance.hash_counter.times_hash_called"", ""start_index"": 263651, ""end_index"": 264821}]",attrs
What values and types are parameterized for testing the `test_prompt_required_with_required` function in the provided library?,"[{""content"": ""@pytest.mark.parametrize(\n    (\""prompt_required\"", \""required\"", \""args\"", \""expect\""),\n    [\n        (True, False, None, \""prompt\""),\n        (True, False, [\""-v\""], \""Option '-v' requires an argument.\""),\n        (False, True, None, \""prompt\""),\n        (False, True, [\""-v\""], \""prompt\""),\n    ],\n)\ndef test_prompt_required_with_required(runner, prompt_required, required, args, expect):\n    @click.command()\n    @click.option(\""-v\"", prompt=True, prompt_required=prompt_required, required=required)\n    def cli(v):\n        click.echo(str(v))\n\n    result = runner.invoke(cli, args, input=\""prompt\"")\n    assert expect in result.output"", ""start_index"": 67027, ""end_index"": 67641}]",click
How does the function calculate the difference between two days represented as '2 days after'?,"[{""content"": ""def test_diff_for_humans_other_and_future_days(today):\n    assert today.diff_for_humans(today.subtract(days=2)) == \""2 days after\"""", ""start_index"": 174162, ""end_index"": 174291}]",pendulum
What is the behavior of the `pendulum.set_locale()` method when called with a malformed locale string?,"[{""content"": ""def test_set_locale_malformed_locale(locale: str) -> None:\n    pendulum.set_locale(locale)\n\n    pendulum.set_locale(\""en\"")"", ""start_index"": 10692, ""end_index"": 10813}]",pendulum
How does the `ExampleSchema` handle serialization errors during the `dump` process using the decorated method?,"[{""content"": ""class ExampleSchema(Schema):\n        @decorator\n        def raise_value_error(self, item, **kwargs):\n            raise ValidationError({\""foo\"": \""error\""})\n\n    schema = ExampleSchema()\n    with pytest.raises(ValidationError) as exc:\n        schema.dump(object())\n    assert exc.value.messages == {\""foo\"": \""error\""}\n    schema.load({})"", ""start_index"": 129999, ""end_index"": 130329}]",marshmallow
What are the different object types for which the `test_get_value_from_object` function validates correct value retrieval for properties 'x' and 'y'?,"[{""content"": ""class PointNT(NamedTuple):\n    x: int | None\n    y: int | None\n"", ""start_index"": 96383, ""end_index"": 96446}, {""content"": ""class PointClass:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n"", ""start_index"": 96448, ""end_index"": 96534}, {""content"": ""class PointDict(dict):\n    def __init__(self, x, y):\n        super().__init__({\""x\"": x})\n        self.y = y\n"", ""start_index"": 96536, ""end_index"": 96643}, {""content"": ""@pytest.mark.parametrize(\n    \""obj\"", [PointNT(24, 42), PointClass(24, 42), PointDict(24, 42), {\""x\"": 24, \""y\"": 42}]\n)\ndef test_get_value_from_object(obj):\n    assert utils.get_value(obj, \""x\"") == 24\n    assert utils.get_value(obj, \""y\"") == 42\n"", ""start_index"": 96645, ""end_index"": 96884}]",marshmallow
What are the possible values for column and header alignment settings in the tabulate library?,"[{""content"": ""`colglobalalign` allows for global alignment of columns, before any\n        specific override from `colalign`. Possible values are: None\n        (defaults according to coltype), \""right\"", \""center\"", \""decimal\"",\n        \""left\"""", ""start_index"": 227164, ""end_index"": 227386}, {""content"": ""`colalign` allows for column-wise override starting from left-most\n        column. Possible values are: \""global\"" (no override), \""right\"",\n        \""center\"", \""decimal\"", \""left\"""", ""start_index"": 227392, ""end_index"": 227564}, {""content"": ""`headersglobalalign` allows for global headers alignment, before any\n        specific override from `headersalign`. Possible values are: None\n        (follow columns alignment), \""right\"", \""center\"", \""left\"""", ""start_index"": 227570, ""end_index"": 227773}, {""content"": ""`headersalign` allows for header-wise override starting from left-most\n        given header. Possible values are: \""global\"" (no override), \""same\""\n        (follow column alignment), \""right\"", \""center\"", \""left\"""", ""start_index"": 227779, ""end_index"": 227984}]",tabulate
How can you disable number parsing for specific columns when using the tabulate function?,"[{""content"": ""To completely disable number parsing (and alignment), use\n    `disable_numparse=True`. For more fine grained control, a list column\n    indices is used to disable number parsing only on those columns\n    e.g. `disable_numparse=[0, 2]` would disable number parsing only on the\n    first and third columns"", ""start_index"": 242147, ""end_index"": 242450}]",tabulate
What happens when comparison methods are called on subclasses in the provided Python code?,"[{""content"": ""def test_subclasses_cannot_be_compared(self):\n        \""\""\""\n        Calling comparison methods on subclasses raises a TypeError.\n\n        We use the actual operation so we get an error raised.\n        \""\""\""\n\n        @attr.s\n        class A:\n            a = attr.ib()\n\n        @attr.s\n        class B(A):\n            pass\n\n        a = A(42)\n        b = B(42)\n\n        assert a <= a\n        assert a >= a\n        assert not a < a\n        assert not a > a\n\n        assert (\n            NotImplemented\n            == a.__lt__(b)\n            == a.__le__(b)\n            == a.__gt__(b)\n            == a.__ge__(b)\n        )\n\n        with pytest.raises(TypeError):\n            a <= b\n\n        with pytest.raises(TypeError):\n            a >= b\n\n        with pytest.raises(TypeError):\n            a < b\n\n        with pytest.raises(TypeError):\n            a > b"", ""start_index"": 133795, ""end_index"": 134640}]",attrs
How does the __hash__ method behavior differ between cached and uncached instances in the test_cache_hashing?,"[{""content"": ""def test_cache_hashing(self):\n        \""\""\""\n        Ensure that hash computation if cached if and only if requested\n        \""\""\""\n\n        class HashCounter:\n            \""\""\""\n            A class for testing which counts how many times its hash\n            has been requested\n            \""\""\""\n\n            def __init__(self):\n                self.times_hash_called = 0\n\n            def __hash__(self):\n                self.times_hash_called += 1\n                return 12345\n\n        Uncached = make_class(\n            \""Uncached\"",\n            {\""hash_counter\"": attr.ib(factory=HashCounter)},\n            unsafe_hash=True,\n            cache_hash=False,\n        )\n        Cached = make_class(\n            \""Cached\"",\n            {\""hash_counter\"": attr.ib(factory=HashCounter)},\n            unsafe_hash=True,\n            cache_hash=True,\n        )\n\n        uncached_instance = Uncached()\n        cached_instance = Cached()\n\n        hash(uncached_instance)\n        hash(uncached_instance)\n        hash(cached_instance)\n        hash(cached_instance)\n\n        assert 2 == uncached_instance.hash_counter.times_hash_called\n        assert 1 == cached_instance.hash_counter.times_hash_called"", ""start_index"": 263651, ""end_index"": 264821}]",attrs
What exceptions are raised when attempting to modify attributes of a frozen class instance in the provided Python code?,"[{""content"": ""@attrs.frozen\n        class F:\n            x: str\n\n        f = F(1)\n\n        with pytest.raises(attrs.exceptions.FrozenInstanceError):\n            f.x = 2"", ""start_index"": 286622, ""end_index"": 286776}, {""content"": ""@attrs.frozen\n        class A:\n            a: int\n\n        @attrs.frozen\n        class B(A):\n            b: int\n\n        @attrs.define(on_setattr=attrs.setters.NO_OP)\n        class C(B):\n            c: int\n\n        assert B(1, 2) == B(1, 2)\n        assert C(1, 2, 3) == C(1, 2, 3)\n\n        with pytest.raises(attrs.exceptions.FrozenInstanceError):\n            A(1).a = 1\n\n        with pytest.raises(attrs.exceptions.FrozenInstanceError):\n            B(1, 2).a = 1\n\n        with pytest.raises(attrs.exceptions.FrozenInstanceError):\n            B(1, 2).b = 2\n\n        with pytest.raises(attrs.exceptions.FrozenInstanceError):\n            C(1, 2, 3).c = 3"", ""start_index"": 287251, ""end_index"": 287903}]",attrs
How does the partial parameter impact the loading of fields in the test_dict_nested_partial_propagated_to_nested method?,"[{""content"": ""def test_dict_nested_partial_propagated_to_nested(self):\n        class Child(Schema):\n            name = fields.String(required=True)\n            age = fields.Integer(required=True)\n\n        class Family(Schema):\n            children = fields.Dict(values=fields.Nested(Child))\n\n        payload = {\""children\"": {\""daughter\"": {\""name\"": \""Lucette\""}}}\n\n        for val in (True, (\""children.age\"",)):\n            result = Family(partial=val).load(payload)\n            assert result[\""children\""][\""daughter\""][\""name\""] == \""Lucette\""\n            result = Family().load(payload, partial=val)\n            assert result[\""children\""][\""daughter\""][\""name\""] == \""Lucette\""\n\n        for val in (False, (\""children.name\"",)):\n            with pytest.raises(ValidationError) as excinfo:\n                result = Family(partial=val).load(payload)\n            assert excinfo.value.args[0] == {\n                \""children\"": {\n                    \""daughter\"": {\""value\"": {\""age\"": [\""Missing data for required field.\""]}}\n                }\n            }\n            with pytest.raises(ValidationError) as excinfo:\n                result = Family().load(payload, partial=val)\n            assert excinfo.value.args[0] == {\n                \""children\"": {\n                    \""daughter\"": {\""value\"": {\""age\"": [\""Missing data for required field.\""]}}\n                }\n            }"", ""start_index"": 240114, ""end_index"": 241441}]",marshmallow
What does the `test_fields` method in the `TestFunctional` class verify for classes `C2` and `C2Slots`?,"[{""content"": ""@pytest.mark.parametrize(\""cls\"", [C2, C2Slots])\n    def test_fields(self, cls):\n        \""\""\""\n        `attr.fields` works.\n        \""\""\""\n        assert (\n            Attribute(\n                name=\""x\"",\n                alias=\""x\"",\n                default=foo,\n                validator=None,\n                repr=True,\n                cmp=None,\n                eq=True,\n                order=True,\n                hash=None,\n                init=True,\n                inherited=False,\n            ),\n            Attribute(\n                name=\""y\"",\n                alias=\""y\"",\n                default=attr.Factory(list),\n                validator=None,\n                repr=True,\n                cmp=None,\n                eq=True,\n                order=True,\n                hash=None,\n                init=True,\n                inherited=False,\n            ),\n        ) == attr.fields(cls)"", ""start_index"": 47725, ""end_index"": 48608}]",attrs
"In the context of the `forward` method implementation in Click, what happens to keyword arguments not originally provided?","[{""content"": ""def forward(self, cmd: Command, /, *args: t.Any, **kwargs: t.Any) -> t.Any:\n        \""\""\""Similar to :meth:`invoke` but fills in default keyword\n        arguments from the current context if the other command expects\n        it.  This cannot invoke callbacks directly, only other commands.\n\n        .. versionchanged:: 8.0\n            All ``kwargs`` are tracked in :attr:`params` so they will be\n            passed if ``forward`` is called at multiple levels.\n        \""\""\""\n        # Can only forward to other commands, not direct callbacks.\n        if not isinstance(cmd, Command):\n            raise TypeError(\""Callback is not a command.\"")\n\n        for param in self.params:\n            if param not in kwargs:\n                kwargs[param] = self.params[param]\n\n        return self.invoke(cmd, *args, **kwargs)"", ""start_index"": 284230, ""end_index"": 285037}]",click
What is the behavior when serializing a constant field with a specified value using the fields.Constant() in a Schema?,"[{""content"": ""def test_constant_field_serialization(self, user):\n        field = fields.Constant(\""something\"")\n        assert field.serialize(\""whatever\"", user) == \""something\"""", ""start_index"": 318365, ""end_index"": 318524}, {""content"": ""def test_constant_is_always_included_in_serialized_data(self):\n        class MySchema(Schema):\n            foo = fields.Constant(42)\n\n        sch = MySchema()\n        assert sch.dump({\""bar\"": 24})[\""foo\""] == 42\n        assert sch.dump({\""foo\"": 24})[\""foo\""] == 42"", ""start_index"": 318530, ""end_index"": 318788}, {""content"": ""def test_constant_field_serialize_when_omitted(self):\n        class MiniUserSchema(Schema):\n            name = fields.Constant(\""bill\"")\n\n        s = MiniUserSchema()\n        assert s.dump({})[\""name\""] == \""bill\"""", ""start_index"": 318794, ""end_index"": 319002}]",marshmallow
How does the __repr__ method format the string representation of an instance that includes time duration components?,"[{""content"": ""def __repr__(self) -> str:\n        rep = f\""{self.__class__.__name__}(\""\n\n        if self._years:\n            rep += f\""years={self._years}, \""\n\n        if self._months:\n            rep += f\""months={self._months}, \""\n\n        if self._weeks:\n            rep += f\""weeks={self._weeks}, \""\n\n        if self._days:\n            rep += f\""days={self._remaining_days}, \""\n\n        if self.hours:\n            rep += f\""hours={self.hours}, \""\n\n        if self.minutes:\n            rep += f\""minutes={self.minutes}, \""\n\n        if self.remaining_seconds:\n            rep += f\""seconds={self.remaining_seconds}, \""\n\n        if self.microseconds:\n            rep += f\""microseconds={self.microseconds}, \""\n\n        rep += \"")\""\n\n        return rep.replace(\"", )\"", \"")\"")"", ""start_index"": 361165, ""end_index"": 361902}]",pendulum
How does the Choice class format the metavariables for required arguments compared to optional arguments or options?,"[{""content"": ""def get_metavar(self, param: Parameter, ctx: Context) -> str | None:\n        if param.param_type_name == \""option\"" and not param.show_choices:  # type: ignore\n            choice_metavars = [\n                convert_type(type(choice)).name.upper() for choice in self.choices\n            ]\n            choices_str = \""|\"".join([*dict.fromkeys(choice_metavars)])\n        else:\n            choices_str = \""|\"".join(\n                [str(i) for i in self._normalized_mapping(ctx=ctx).values()]\n            )\n\n        # Use curly braces to indicate a required argument.\n        if param.required and param.param_type_name == \""argument\"":\n            return f\""{{{choices_str}}}\""\n\n        # Use square braces to indicate an option or optional argument.\n        return f\""[{choices_str}]\"""", ""start_index"": 381899, ""end_index"": 382671}]",click
How does the function handle a time string with a specified timestamp during parsing?,"[{""content"": ""if parsed[\""timestamp\""] is not None:\n            str_us = str(parsed[\""timestamp\""])\n            if \"".\"" in str_us:\n                microseconds = int(f\""{str_us.split('.')[1].ljust(6, '0')}\"")\n            else:\n                microseconds = 0\n\n            from pendulum.helpers import local_time\n\n            time = local_time(parsed[\""timestamp\""], 0, microseconds)\n            validated[\""year\""] = time[0]\n            validated[\""month\""] = time[1]\n            validated[\""day\""] = time[2]\n            validated[\""hour\""] = time[3]\n            validated[\""minute\""] = time[4]\n            validated[\""second\""] = time[5]\n            validated[\""microsecond\""] = time[6]\n\n            return validated"", ""start_index"": 670093, ""end_index"": 670774}]",pendulum
What happens to the hash value of an object after it undergoes serialization and deserialization in the test_cache_hash_serialization_hash_cleared?,"[{""content"": ""def test_cache_hash_serialization_hash_cleared(self, klass, cached):\n        \""\""\""\n        Tests that the hash cache is cleared on deserialization to fix\n        https://github.com/python-attrs/attrs/issues/482 .\n\n        This test is intended to guard against a stale hash code surviving\n        across serialization (which may cause problems when the hash value\n        is different in different interpreters).\n        \""\""\""\n\n        obj = klass(IncrementingHasher())\n        original_hash = hash(obj)\n        obj_rt = self._roundtrip_pickle(obj)\n\n        if cached:\n            assert original_hash == hash(obj)\n\n        assert original_hash != hash(obj_rt)"", ""start_index"": 265920, ""end_index"": 266576}]",attrs
"How does the function `total_seconds` calculate the total number of seconds in the presence of years, months, weeks, days, seconds, and microseconds, considering the presence of the PYPY condition?","[{""content"": ""if PYPY:\n\n        def total_seconds(self) -> float:\n            days = 0\n\n            if hasattr(self, \""_years\""):\n                days += self._years * 365\n\n            if hasattr(self, \""_months\""):\n                days += self._months * 30\n\n            if hasattr(self, \""_remaining_days\""):\n                days += self._weeks * 7 + self._remaining_days\n            else:\n                days += self._days\n\n            return (\n                (days * SECONDS_PER_DAY + self._seconds) * US_PER_SECOND\n                + self._microseconds\n            ) / US_PER_SECOND"", ""start_index"": 356815, ""end_index"": 357382}]",pendulum
How is the date reset to the start or end of a specific time period in the methods _start_of_decade and _end_of_decade?,"[{""content"": ""def _start_of_decade(self) -> Self:\n        \""\""\""\n        Reset the date to the first day of the decade\n        and the time to 00:00:00.\n        \""\""\""\n        year = self.year - self.year % YEARS_PER_DECADE\n        return self.set(year, 1, 1, 0, 0, 0, 0)"", ""start_index"": 406247, ""end_index"": 406498}, {""content"": ""def _end_of_decade(self) -> Self:\n        \""\""\""\n        Reset the date to the last day of the decade\n        and the time to 23:59:59.999999.\n        \""\""\""\n        year = self.year - self.year % YEARS_PER_DECADE + YEARS_PER_DECADE - 1\n\n        return self.set(year, 12, 31, 23, 59, 59, 999999)"", ""start_index"": 406504, ""end_index"": 406793}]",pendulum
What is the behavior of the `test_no_order` test method in relation to element comparison in the `TestNextGen` class?,"[{""content"": ""def test_no_order(self):\n        \""\""\""\n        Order is off by default but can be added.\n        \""\""\""\n        with pytest.raises(TypeError):\n            C(\""1\"", 2) < C(\""2\"", 3)\n\n        @attrs.define(order=True)\n        class Ordered:\n            x: int\n\n        assert Ordered(1) < Ordered(2)"", ""start_index"": 283075, ""end_index"": 283363}]",attrs
"What is the result of multiplying a pendulum duration of 6 days, 34 seconds, and 522222 microseconds by 2?","[{""content"": ""def test_multiply():\n    it = pendulum.duration(days=6, seconds=34, microseconds=522222)\n    mul = it * 2\n\n    assert isinstance(mul, pendulum.Duration)\n    assert_duration(mul, 0, 0, 1, 5, 0, 1, 9, 44444)"", ""start_index"": 249355, ""end_index"": 249560}]",pendulum
How does the Context utility handle the modification of serialization and deserialization values in marshmallow?,"[{""content"": ""class TestContext:\n    def test_context_load_dump(self):\n        class ContextField(fields.Integer):\n            def _serialize(self, value, attr, obj, **kwargs):\n                if (context := Context[dict].get(None)) is not None:\n                    value *= context.get(\""factor\"", 1)\n                return super()._serialize(value, attr, obj, **kwargs)\n\n            def _deserialize(self, value, attr, data, **kwargs):\n                val = super()._deserialize(value, attr, data, **kwargs)\n                if (context := Context[dict].get(None)) is not None:\n                    val *= context.get(\""factor\"", 1)\n                return val\n\n        class ContextSchema(Schema):\n            ctx_fld = ContextField()\n\n        ctx_schema = ContextSchema()\n\n        assert ctx_schema.load({\""ctx_fld\"": 1}) == {\""ctx_fld\"": 1}\n        assert ctx_schema.dump({\""ctx_fld\"": 1}) == {\""ctx_fld\"": 1}\n        with Context({\""factor\"": 2}):\n            assert ctx_schema.load({\""ctx_fld\"": 1}) == {\""ctx_fld\"": 2}\n            assert ctx_schema.dump({\""ctx_fld\"": 1}) == {\""ctx_fld\"": 2}\n"", ""start_index"": 242148, ""end_index"": 243209}]",marshmallow
What are the conditions under which an instance of `Field` or a subclass thereof is resolved in marshmallow?,"[{""content"": ""def _resolve_field_instance(cls_or_instance: Field | type[Field]) -> Field:\n    \""\""\""Return a Field instance from a Field class or instance.\n\n    :param cls_or_instance: Field class or instance.\n    \""\""\""\n    if isinstance(cls_or_instance, type):\n        if not issubclass(cls_or_instance, Field):\n            raise _FieldInstanceResolutionError\n        return cls_or_instance()\n    if not isinstance(cls_or_instance, Field):\n        raise _FieldInstanceResolutionError\n    return cls_or_instance"", ""start_index"": 350581, ""end_index"": 351073}]",marshmallow
What field attributes are set for the 'homepage' in the UserSchema using the marshmallow library?,"[{""content"": ""class UserSchema(Schema):\n    name = fields.String(allow_none=True)\n    email = fields.Email(allow_none=True)\n    age = fields.Integer()\n    created = fields.DateTime()\n    id = fields.Integer(allow_none=True)\n    homepage = fields.Url()\n    birthdate = fields.Date()"", ""start_index"": 134777, ""end_index"": 135044}]",marshmallow
What checks are performed when using the check_warnings function to validate warnings in a test?,"[{""content"": ""def check_warnings(func_args_kwargs, *, num=None, category=None, contain=None):\n    func, args, kwargs = func_args_kwargs\n    with warnings.catch_warnings(record=True) as W:\n        # Causes all warnings to always be triggered inside here.\n        warnings.simplefilter(\""always\"")\n        func(*args, **kwargs)\n        # Checks\n        if num is not None:\n            assert len(W) == num\n        if category is not None:\n            assert all([issubclass(w.category, category) for w in W])\n        if contain is not None:\n            assert all([contain in str(w.message) for w in W])"", ""start_index"": 134914, ""end_index"": 135499}]",tabulate
What is the expected formatting result when aligning single cell text vertically in the center of a cell with three padding lines?,"[{""content"": ""def test_align_cell_veritically_center_single_text_multiple_pad():\n    \""Internal: Align single cell text to center\""\n    result = T._align_cell_veritically([\""one line\""], 3, 8, \""center\"")\n\n    expected = [\""        \"", \""one line\"", \""        \""]\n\n    assert_equal(expected, result)"", ""start_index"": 21951, ""end_index"": 22224}]",tabulate
How does the `test_init_with_missing_values` function verify default values for missing time components using the `pendulum.time` method?,"[{""content"": ""def test_init_with_missing_values():\n    t = pendulum.time(12, 34, 56)\n    assert_time(t, 12, 34, 56, 0)\n\n    t = pendulum.time(12, 34)\n    assert_time(t, 12, 34, 0, 0)\n\n    t = pendulum.time(12)\n    assert_time(t, 12, 0, 0, 0)"", ""start_index"": 180851, ""end_index"": 181078}]",pendulum
What default values are used for the time components when parsing only a year using the `parse` function?,"[{""content"": ""def test_y():\n    text = \""2016\""\n\n    parsed = parse(text)\n\n    assert parsed.year == 2016\n    assert parsed.month == 1\n    assert parsed.day == 1\n    assert parsed.hour == 0\n    assert parsed.minute == 0\n    assert parsed.second == 0\n    assert parsed.microsecond == 0\n    assert parsed.tzinfo is None"", ""start_index"": 213445, ""end_index"": 213746}]",pendulum
What is the purpose of the `_resolve_field_instance` method in the marshmallow library?,"[{""content"": ""def _resolve_field_instance(cls_or_instance: Field | type[Field]) -> Field:\n    \""\""\""Return a Field instance from a Field class or instance.\n\n    :param cls_or_instance: Field class or instance.\n    \""\""\""\n    if isinstance(cls_or_instance, type):\n        if not issubclass(cls_or_instance, Field):\n            raise _FieldInstanceResolutionError\n        return cls_or_instance()\n    if not isinstance(cls_or_instance, Field):\n        raise _FieldInstanceResolutionError\n    return cls_or_instance"", ""start_index"": 350581, ""end_index"": 351073}]",marshmallow
What types of objects can be passed as the 'message' parameter to `marshmallow.ValidationError`?,"[{""content"": ""ma.ValidationError(\""foo\"")"", ""start_index"": 334797, ""end_index"": 334822}, {""content"": ""ma.ValidationError([\""foo\""])"", ""start_index"": 334823, ""end_index"": 334850}, {""content"": ""ma.ValidationError({\""foo\"": \""bar\""})"", ""start_index"": 334851, ""end_index"": 334885}]",marshmallow
What configuration in `docs/conf.py` specifies to strip the dollar prompt when copying code using the Sphinx copybutton?,"[{""content"": ""copybutton_prompt_text = \""$ \"""", ""start_index"": 337226, ""end_index"": 337255}]",marshmallow
What types of data types are checked for each format in the `test_tabulate_formats` function?,"[{""content"": ""def test_tabulate_formats():\n    \""API: tabulate_formats is a list of strings\"" \""\""\n    supported = tabulate_formats\n    print(\""tabulate_formats = %r\"" % supported)\n    assert type(supported) is list\n    for fmt in supported:\n        assert type(fmt) is str  # noqa"", ""start_index"": 135734, ""end_index"": 135995}]",tabulate
What validation checks are performed when creating a new Interval instance in the Pendulum library?,"[{""content"": ""class Interval(Duration, Generic[_T]):\n    \""\""\""\n    An interval of time between two datetimes.\n    \""\""\""\n\n    def __new__(cls, start: _T, end: _T, absolute: bool = False) -> Self:\n        if (isinstance(start, datetime) and not isinstance(end, datetime)) or (\n            not isinstance(start, datetime) and isinstance(end, datetime)\n        ):\n            raise ValueError(\n                \""Both start and end of an Interval must have the same type\""\n            )\n\n        if (\n            isinstance(start, datetime)\n            and isinstance(end, datetime)\n            and (\n                (start.tzinfo is None and end.tzinfo is not None)\n                or (start.tzinfo is not None and end.tzinfo is None)\n            )\n        ):\n            raise TypeError(\""can't compare offset-naive and offset-aware datetimes\"")\n\n        if absolute and start > end:\n            end, start = start, end"", ""start_index"": 338638, ""end_index"": 339532}]",pendulum
What are the detailed assertions tested by the `test_parse_now` function in the Pendulum library when parsing the 'now' keyword?,"[{""content"": ""def test_parse_now() -> None:\n    assert pendulum.parse(\""now\"").timezone_name == \""UTC\""\n    assert (\n        pendulum.parse(\""now\"", tz=\""America/Los_Angeles\"").timezone_name\n        == \""America/Los_Angeles\""\n    )\n\n    dt = pendulum.parse(\""now\"", tz=\""local\"")\n    assert dt.timezone_name == \""America/Toronto\""\n\n    mock_now = pendulum.yesterday()\n\n    with pendulum.travel_to(mock_now, freeze=True):\n        assert pendulum.parse(\""now\"") == mock_now"", ""start_index"": 3406, ""end_index"": 3845}]",pendulum
What are the values set by the `test_init_with_missing_values` function for missing time components using the `pendulum.time` method?,"[{""content"": ""def test_init_with_missing_values():\n    t = pendulum.time(12, 34, 56)\n    assert_time(t, 12, 34, 56, 0)\n\n    t = pendulum.time(12, 34)\n    assert_time(t, 12, 34, 0, 0)\n\n    t = pendulum.time(12)\n    assert_time(t, 12, 0, 0, 0)"", ""start_index"": 180851, ""end_index"": 181078}]",pendulum
How does the Flask application route and handle requests for individual quotes by their unique identifier?,"[{""content"": ""from flask import Flask, request"", ""start_index"": 340392, ""end_index"": 340424}, {""content"": ""app = Flask(__name__)"", ""start_index"": 340654, ""end_index"": 340675}, {""content"": ""@app.route(\""/quotes/<int:pk>\"")\ndef get_quote(pk):\n    try:\n        quote = Quote.query.filter(Quote.id == pk).one()\n    except NoResultFound:\n        return {\""message\"": \""Quote could not be found.\""}, 400\n    result = quote_schema.dump(quote)\n    return {\""quote\"": result}"", ""start_index"": 343412, ""end_index"": 343681}]",marshmallow
How does the 'ContextField' class modify the serialization and deserialization processes in marshmallow based on a context?,"[{""content"": ""class ContextField(fields.Integer):\n            def _serialize(self, value, attr, obj, **kwargs):\n                if (context := Context[dict].get(None)) is not None:\n                    value *= context.get(\""factor\"", 1)\n                return super()._serialize(value, attr, obj, **kwargs)\n\n            def _deserialize(self, value, attr, data, **kwargs):\n                val = super()._deserialize(value, attr, data, **kwargs)\n                if (context := Context[dict].get(None)) is not None:\n                    val *= context.get(\""factor\"", 1)\n                return val"", ""start_index"": 242213, ""end_index"": 242789}]",marshmallow
How does the `OrderedSet` class ensure uniqueness while maintaining order when adding new elements?,"[{""content"": ""class OrderedSet(MutableSet):\n    def __init__(self, iterable=None):\n        self.end = end = []\n        end += [None, end, end]  # sentinel node for doubly linked list\n        self.map = {}  # key --> [key, prev, next]\n        if iterable is not None:\n            self |= iterable"", ""start_index"": 424116, ""end_index"": 424397}, {""content"": ""def add(self, key):\n        if key not in self.map:\n            end = self.end\n            curr = end[1]\n            curr[2] = end[1] = self.map[key] = [key, curr, end]"", ""start_index"": 424521, ""end_index"": 424689}]",marshmallow
How does the benchmark script modify the method list based on command-line arguments to restrict benchmarking to only tabulate-related functions?,"[{""content"": ""global methods\n    if \""--onlyself\"" in sys.argv[1:]:\n        methods = [m for m in methods if m[0].startswith(\""tabulate\"")]"", ""start_index"": 1495, ""end_index"": 1616}]",tabulate
How is the parameter 'param' handled in the `__init_subclass__` method within the `Base` class when `slots=False` is used?,"[{""content"": ""\n    @attr.s(slots=False)\n    class Base:\n        def __init_subclass__(cls, param, **kw):\n            super().__init_subclass__(**kw)\n            cls.param = param\n\n    @attr.s\n    class Attrs(Base, param=\""foo\""):\n        pass\n\n    assert \""foo\"" == Attrs().param\n"", ""start_index"": 309989, ""end_index"": 310251}]",attrs
What exception is raised when you attempt to activate ordering for comparison in the TestNextGen class without enabling it in the attrs define decorator?,"[{""content"": ""@attrs.define(order=True)\n        class Ordered:\n            x: int\n\n        assert Ordered(1) < Ordered(2)"", ""start_index"": 283256, ""end_index"": 283363}]",attrs
What Python version is the Click documentation configured to link to via its intersphinx mapping?,"[{""content"": ""intersphinx_mapping = {\n    \""python\"": (\""https://docs.python.org/3/\"", None),\n}"", ""start_index"": 207422, ""end_index"": 207499}]",click
How is the verbosity level controlled in the click-based ComplexCLI?,"[{""content"": ""class Environment:\n    def __init__(self):\n        self.verbose = False\n        self.home = os.getcwd()\n\n    def log(self, msg, *args):\n        \""\""\""Logs a message to stderr.\""\""\""\n        if args:\n            msg %= args\n        click.echo(msg, file=sys.stderr)\n\n    def vlog(self, msg, *args):\n        \""\""\""Logs a message to stderr only if verbose is enabled.\""\""\""\n        if self.verbose:\n            self.log(msg, *args)"", ""start_index"": 209340, ""end_index"": 209755}, {""content"": ""class ComplexCLI(click.Group):\n    def list_commands(self, ctx):\n        rv = []\n        for filename in os.listdir(cmd_folder):\n            if filename.endswith(\"".py\"") and filename.startswith(\""cmd_\""):\n                rv.append(filename[4:-3])\n        rv.sort()\n        return rv\n\n    def get_command(self, ctx, name):\n        try:\n            mod = __import__(f\""complex.commands.cmd_{name}\"", None, None, [\""cli\""])\n        except ImportError:\n            return\n        return mod.cli"", ""start_index"": 209913, ""end_index"": 210396}, {""content"": ""@click.command(cls=ComplexCLI, context_settings=CONTEXT_SETTINGS)\n@click.option(\n    \""--home\"",\n    type=click.Path(exists=True, file_okay=False, resolve_path=True),\n    help=\""Changes the folder to operate on.\"",\n)\n@click.option(\""-v\"", \""--verbose\"", is_flag=True, help=\""Enables verbose mode.\"")\n@pass_environment\ndef cli(ctx, verbose, home):\n    \""\""\""A complex command line interface.\""\""\""\n    ctx.verbose = verbose\n    if home is not None:\n        ctx.home = home"", ""start_index"": 210399, ""end_index"": 210854}]",click
What happens to the date components when setting a specific month using the `pendulum.Date.set` method?,"[{""content"": ""def test_fluid_month_setter():\n    d = pendulum.Date(2016, 7, 2)\n    new = d.set(month=11)\n\n    assert new.month == 11\n    assert d.month == 7"", ""start_index"": 178246, ""end_index"": 178388}]",pendulum
What attributes are configured for the `MySchema.Meta` class in the test schema of marshmallow?,"[{""content"": ""class MySchema(Schema):\n    foo = String()\n    bar = Integer()\n\n    class Meta(Schema.Meta):\n        fields = (\""foo\"", \""bar\"")\n        additional = (\""baz\"", \""qux\"")\n        include = {\n            \""foo2\"": String(),\n        }\n        exclude = (\""bar\"", \""baz\"")\n        many = True\n        dateformat = \""%Y-%m-%d\""\n        datetimeformat = \""%Y-%m-%dT%H:%M:%S\""\n        timeformat = \""%H:%M:%S\""\n        render_module = json\n        ordered = False\n        index_errors = True\n        load_only = (\""foo\"", \""bar\"")\n        dump_only = (\""baz\"", \""qux\"")\n        unknown = EXCLUDE\n        register = False"", ""start_index"": 334123, ""end_index"": 334707}]",marshmallow
What settings are specified for the HTML theme in the Sphinx documentation configuration for the marshmallow project?,"[{""content"": ""html_theme = \""furo\"""", ""start_index"": 336105, ""end_index"": 336124}, {""content"": ""html_theme_options = {\n    \""light_logo\"": \""marshmallow-logo-with-title.png\"",\n    \""dark_logo\"": \""marshmallow-logo-with-title-for-dark-theme.png\"",\n    \""source_repository\"": \""https://github.com/marshmallow-code/marshmallow\"",\n    \""source_branch\"": \""dev\"",\n    \""source_directory\"": \""docs/\"",\n    \""sidebar_hide_name\"": True,\n    \""light_css_variables\"": {\n        # Serif system font stack: https://systemfontstack.com/\n        \""font-stack\"": \""Iowan Old Style, Apple Garamond, Baskerville, Times New Roman, Droid Serif, Times, Source Serif Pro, serif, Apple Color Emoji, Segoe UI Emoji, Segoe UI Symbol;\"",\n    },\n    \""top_of_page_buttons\"": [\""view\""],\n}"", ""start_index"": 336125, ""end_index"": 336759}]",marshmallow
How does the function `test_plain_maxcolwidth_autowraps_with_sep` handle cell autowrapping with inclusion of separator lines in the plain output format?,"[{""content"": ""def test_plain_maxcolwidth_autowraps_with_sep():\n    \""Output: maxcolwidth will result in autowrapping longer cells and separating line\""\n    table = [\n        [\""hdr\"", \""fold\""],\n        [\""1\"", \""very long data\""],\n        SEPARATING"", ""start_index"": 33269, ""end_index"": 33495}, {""content"": ""SEPARATING_LINE,"", ""start_index"": 38409, ""end_index"": 38425}]",tabulate
What is the type of the values in the 'tabulate_formats' list as checked in the `test_tabulate_formats` function?,"[{""content"": ""from tabulate import tabulate, tabulate_formats, simple_separated_format"", ""start_index"": 135527, ""end_index"": 135599}, {""content"": ""def test_tabulate_formats():\n    \""API: tabulate_formats is a list of strings\"" \""\""\n    supported = tabulate_formats\n    print(\""tabulate_formats = %r\"" % supported)\n    assert type(supported) is list\n    for fmt in supported:\n        assert type(fmt) is str  # noqa"", ""start_index"": 135734, ""end_index"": 135995}]",tabulate
How is compatibility with cloudpickle tested in the TestCloudpickleCompat class?,"[{""content"": ""cloudpickle = pytest.importorskip(\""cloudpickle\"")"", ""start_index"": 66807, ""end_index"": 66855}, {""content"": ""class TestCloudpickleCompat:\n    \""\""\""\n    Tests for compatibility with ``cloudpickle``.\n    \""\""\""\n\n    @given(simple_classes(cached_property=False))\n    def test_repr(self, cls):\n        \""\""\""\n        attrs instances can be pickled and un-pickled with cloudpickle.\n        \""\""\""\n        inst = cls()\n        # Exact values aren't a concern so long as neither direction\n        # raises an exception.\n        pkl = cloudpickle.dumps(inst)\n        cloudpickle.loads(pkl)"", ""start_index"": 66858, ""end_index"": 67319}]",attrs
How does Click handle subcommands in a group command where the subcommand starts with a specified incomplete string?,"[{""content"": ""def _complete_visible_commands(\n    ctx: Context, incomplete: str\n) -> cabc.Iterator[tuple[str, Command]]:\n    \""\""\""List all the subcommands of a group that start with the\n    incomplete value and aren't hidden.\n\n    :param ctx: Invocation context for the group.\n    :param incomplete: Value being completed. May be empty.\n    \""\""\""\n    multi = t.cast(Group, ctx.command)\n\n    for name in multi.list_commands(ctx):\n        if name.startswith(incomplete):\n            command = multi.get_command(ctx, name)\n\n            if command is not None and not command.hidden:\n                yield name, command"", ""start_index"": 255827, ""end_index"": 256424}]",click
"What happens when you try to access the deprecated ""BaseCommand"", ""MultiCommand"", or ""OptionParser"" attributes in Click?","[{""content"": ""def __getattr__(name: str) -> object:\n    import warnings\n\n    if name == \""BaseCommand\"":\n        from .core import _BaseCommand\n\n        warnings.warn(\n            \""'BaseCommand' is deprecated and will be removed in Click 9.0. Use\""\n            \"" 'Command' instead.\"",\n            DeprecationWarning,\n            stacklevel=2,\n        )\n        return _BaseCommand\n\n    if name == \""MultiCommand\"":\n        from .core import _MultiCommand\n\n        warnings.warn(\n            \""'MultiCommand' is deprecated and will be removed in Click 9.0. Use\""\n            \"" 'Group' instead.\"",\n            DeprecationWarning,\n            stacklevel=2,\n        )\n        return _MultiCommand\n\n    if name == \""OptionParser\"":\n        from .parser import _OptionParser\n\n        warnings.warn(\n            \""'OptionParser' is deprecated and will be removed in Click 9.0. The\""\n            \"" old parser is available in 'optparse'.\"",\n            DeprecationWarning,\n            stacklevel=2,\n        )\n        return _OptionParser"", ""start_index"": 252933, ""end_index"": 253933}]",click
How does the `test_closest_with_equals` function determine which time instance is closest when two times are compared?,"[{""content"": ""def test_closest_with_equals():\n    instance = pendulum.time(12, 34, 56)\n    t1 = pendulum.time(12, 34, 56)\n    t2 = pendulum.time(12, 34, 59)\n    closest = instance.closest(t1, t2)\n    assert t1 == closest"", ""start_index"": 183767, ""end_index"": 183973}]",pendulum
How does Pendulum determine if two intervals with the same duration but different start and end dates are equal or distinct?,"[{""content"": ""def test_intervals_with_same_duration_and_different_dates():\n    day1 = pendulum.DateTime(2018, 1, 1)\n    day2 = pendulum.DateTime(2018, 1, 2)\n    day3 = pendulum.DateTime(2018, 1, 2)\n\n    interval1 = day2 - day1\n    interval2 = day3 - day2\n\n    assert interval1 != interval2\n    assert len({interval1, interval2}) == 2"", ""start_index"": 132929, ""end_index"": 133248}]",pendulum
What does the `on_bind_field` method in the `CamelCaseSchema` class do to the fields?,"[{""content"": ""class CamelCaseSchema(Schema):\n    \""\""\""Schema that uses camel-case for its external representation\n    and snake-case for its internal representation.\n    \""\""\""\n\n    def on_bind_field(self, field_name, field_obj):\n        field_obj.data_key = camelcase(field_obj.data_key or field_name)"", ""start_index"": 337896, ""end_index"": 338179}]",marshmallow
How does the `OrderedSet` method `pop` determine which element to remove based on the `last` parameter?,"[{""content"": ""def pop(self, last=True):\n        if not self:\n            raise KeyError(\""set is empty\"")\n        key = self.end[1][0] if last else self.end[2][0]\n        self.discard(key)\n        return key"", ""start_index"": 425180, ""end_index"": 425371}]",marshmallow
What exception is thrown by the `frozen` function in the `setters.py` module if an attempt is made to modify an attribute?,"[{""content"": ""def frozen(_, __, ___):\n    \""\""\""\n    Prevent an attribute to be modified.\n\n    .. versionadded:: 20.1.0\n    \""\""\""\n    raise FrozenAttributeError"", ""start_index"": 327975, ""end_index"": 328116}]",attrs
What is returned by the `pipe` function defined in the setters module of the attrs library?,"[{""content"": ""\""\""\""\nCommonly used hooks for on_setattr.\n\""\""\""\n\nfrom . import _config\nfrom .exceptions import FrozenAttributeError\n\n\ndef pipe(*setters):\n    \""\""\""\n    Run all *setters* and return the return value of the last one.\n\n    .. versionadded:: 20.1.0\n    \""\""\""\n\n    def wrapped_pipe(instance, attrib, new_value):\n        rv = new_value\n\n        for setter in setters:\n            rv = setter(instance, attrib, rv)\n\n        return rv\n\n    return wrapped_pipe"", ""start_index"": 327529, ""end_index"": 327972}]",attrs
What does setting the attribute `auto_exc` to true entail in the `define` function?,"[{""content"": ""auto_exc (bool):\n            If the class subclasses `BaseException` (which implicitly includes\n            any subclass of any exception), the following happens to behave\n            like a well-behaved Python exception class:\n\n            - the values for *eq*, *order*, and *hash* are ignored and the\n              instances compare and hash by the instance's ids [#]_ ,\n            - all attributes that are either passed into ``__init__`` or have a\n              default value are additionally available as a tuple in the\n              ``args`` attribute,\n            - the value of *str* is ignored leaving ``__str__`` to base\n              classes.\n\n            .. [#]\n               Note that *attrs* will *not* remove existing implementations of\n               ``__hash__`` or the equality methods. It just won't add own\n               ones"", ""start_index"": 454607, ""end_index"": 455456}]",attrs
